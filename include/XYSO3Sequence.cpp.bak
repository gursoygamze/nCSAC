/* -----------------------------------------------------------------------------
 *
 *  Copyright (C) 1997-2008 Krzysztof M. Gorski, Eric Hivon, 
 *                          Benjamin D. Wandelt, Anthony J. Banday, 
 *                          Matthias Bartelmann, 
 *                          Reza Ansari & Kenneth M. Ganga 
 *
 *
 *  This file is part of HEALPix.
 *
 *  HEALPix is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  HEALPix is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with HEALPix; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *  For more information about HEALPix see http://healpix.jpl.nasa.gov
 *
 *----------------------------------------------------------------------------- */
/*
 *  XYSO3Sequence.cpp
 *  CHROMATIN_SIS_COARSE
 *
 *  Created by Yun Xu on 10/11/11.
 *  Copyright 2011 __MyCompanyName__. All rights reserved.
 *
 */

#include "XYSO3Sequence.h"
//----------------------------------------------------------------------------

CXYSO3Sequence::CXYSO3Sequence(){
	m_iNumPoints = 72;
}
//----------------------------------------------------------------------------
CXYSO3Sequence::CXYSO3Sequence(int iNumPoints){
	m_iNumPoints = iNumPoints;
}
//----------------------------------------------------------------------------

CXYSO3Sequence::~CXYSO3Sequence(){
}

//----------------------------------------------------------------------------
void CXYSO3Sequence::pix2ang_nest(long nside, long ipix, double *theta, double *phi){
  /*
	 c=======================================================================
	 subroutine pix2ang_nest(nside, ipix, theta, phi)
	 c=======================================================================
	 c     gives theta and phi corresponding to pixel ipix (NESTED) 
	 c     for a parameter nside
	 c=======================================================================
	 */
	
	int npix, npface, face_num;
	int  ipf, ip_low, ip_trunc, ip_med, ip_hi;
	int     ix, iy, jrt, jr, nr, jpt, jp, kshift, nl4;
	double z, fn, fact1, fact2;
	double piover2=0.5*M_PI;
	int ns_max=8192;
	
	static int pix2x[1024], pix2y[1024];
	//      common /pix2xy/ pix2x, pix2y
	
	int jrll[12], jpll[12];// ! coordinate of the lowest corner of each face
	//      data jrll/2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4/ ! in unit of nside
	//      data jpll/1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7/ ! in unit of nside/2
	jrll[0]=2;
	jrll[1]=2;
	jrll[2]=2;
	jrll[3]=2;
	jrll[4]=3;
	jrll[5]=3;
	jrll[6]=3;
	jrll[7]=3;
	jrll[8]=4;
	jrll[9]=4;
	jrll[10]=4;
	jrll[11]=4;
	jpll[0]=1;
	jpll[1]=3;
	jpll[2]=5;
	jpll[3]=7;
	jpll[4]=0;
	jpll[5]=2;
	jpll[6]=4;
	jpll[7]=6;
	jpll[8]=1;
	jpll[9]=3;
	jpll[10]=5;
	jpll[11]=7;
	
	
	if( nside<1 || nside>ns_max ) {
		fprintf(stderr, "%s (%d): nside out of range: %ld\n", __FILE__, __LINE__, nside);
		exit(0);
	}
	npix = 12 * nside*nside;
	if( ipix<0 || ipix>npix-1 ) {
		fprintf(stderr, "%s (%d): ipix out of range: %ld\n", __FILE__, __LINE__, ipix);
		exit(0);
	}
	
	/* initiates the array for the pixel number -> (x,y) mapping */
	if( pix2x[1023]<=0 ) mk_pix2xy(pix2x,pix2y);
	
	fn = 1.*nside;
	fact1 = 1./(3.*fn*fn);
	fact2 = 2./(3.*fn);
	nl4   = 4*nside;
	
	//c     finds the face, and the number in the face
	npface = nside*nside;
	
	face_num = ipix/npface;//  ! face number in {0,11}
	ipf = (int)fmod(ipix,npface);//  ! pixel number in the face {0,npface-1}
	
	//c     finds the x,y on the face (starting from the lowest corner)
	//c     from the pixel number
	ip_low = (int)fmod(ipf,1024);//       ! content of the last 10 bits
	ip_trunc =   ipf/1024 ;//       ! truncation of the last 10 bits
	ip_med = (int)fmod(ip_trunc,1024);//  ! content of the next 10 bits
	ip_hi  =     ip_trunc/1024   ;//! content of the high weight 10 bits
	
	ix = 1024*pix2x[ip_hi] + 32*pix2x[ip_med] + pix2x[ip_low];
	iy = 1024*pix2y[ip_hi] + 32*pix2y[ip_med] + pix2y[ip_low];
	
	//c     transforms this in (horizontal, vertical) coordinates
	jrt = ix + iy;//  ! 'vertical' in {0,2*(nside-1)}
	jpt = ix - iy;//  ! 'horizontal' in {-nside+1,nside-1}
	
	//c     computes the z coordinate on the sphere
	//      jr =  jrll[face_num+1]*nside - jrt - 1;//   ! ring number in {1,4*nside-1}
	jr =  jrll[face_num]*nside - jrt - 1;
	//      cout << "face_num=" << face_num << endl;
	//      cout << "jr = " << jr << endl;
	//      cout << "jrll(face_num)=" << jrll[face_num] << endl;
	//      cout << "----------------------------------------------------" << endl;
	nr = nside;//                  ! equatorial region (the most frequent)
	z  = (2*nside-jr)*fact2;
	kshift = (int)fmod(jr - nside, 2);
	if( jr<nside ) { //then     ! north pole region
		nr = jr;
		z = 1. - nr*nr*fact1;
		kshift = 0;
	}
	else {
		if( jr>3*nside ) {// then ! south pole region
			nr = nl4 - jr;
			z = - 1. + nr*nr*fact1;
			kshift = 0;
		}
	}
	*theta = acos(z);
	
	//c     computes the phi coordinate on the sphere, in [0,2Pi]
	//      jp = (jpll[face_num+1]*nr + jpt + 1 + kshift)/2;//  ! 'phi' number in the ring in {1,4*nr}
	jp = (jpll[face_num]*nr + jpt + 1 + kshift)/2;
	if( jp>nl4 ) jp = jp - nl4;
	if( jp<1 )   jp = jp + nl4;
	
	*phi = (jp - (kshift+1)*0.5) * (piover2 / nr);
	
}
//----------------------------------------------------------------------------
void CXYSO3Sequence::mk_pix2xy(int *pix2x, int *pix2y){
  /* =======================================================================
   * subroutine mk_pix2xy
   * =======================================================================
   * constructs the array giving x and y in the face from pixel number
   * for the nested (quad-cube like) ordering of pixels
   *
   * the bits corresponding to x and y are interleaved in the pixel number
   * one breaks up the pixel number by even and odd bits
   * =======================================================================
   */
	
  int i, kpix, jpix, IX, IY, IP, ID;
  for (i = 0; i < 1023; i++) pix2x[i]=0;
  
  for( kpix=0;kpix<1024;kpix++ ) {
    jpix = kpix;
    IX = 0;
    IY = 0;
    IP = 1 ;//              ! bit position (in x and y)
    while( jpix!=0 ){// ! go through all the bits
      ID = (int)fmod(jpix,2);//  ! bit value (in kpix), goes in ix
      jpix = jpix/2;
      IX = ID*IP+IX;
      
      ID = (int)fmod(jpix,2);//  ! bit value (in kpix), goes in iy
      jpix = jpix/2;
      IY = ID*IP+IY;
      
      IP = 2*IP;//         ! next bit (in x and y)
    }
    
    pix2x[kpix] = IX;//     ! in 0,31
    pix2y[kpix] = IY;//     ! in 0,31
  }
  
  /* Later */
  return;
}
//----------------------------------------------------------------------------
vector<double> CXYSO3Sequence::find_point(int base_grid, long int point,long int level,long int healpix_point,double s1_point)
{
	int position=point%8;
	long int quo=0;
	vector <double> Point;
	double interval=30/level;
	// the choosing of the order of the first resolution 4 points depends on which base healpix grid we are now dividing 
	
	if(base_grid == 6 or base_grid == 7)
	{
		switch(position) //this position tells which of the eight points of the cube to consider 
		{ 
			case 0:
				healpix_point+=3;
				s1_point-=(interval/2);
				break;
			case 1:
				healpix_point+=0;
				s1_point+=(interval/2);
				break;
			case 2: 
				healpix_point+=3;
				s1_point+=(interval/2);
				break;
			case 3:
				healpix_point+=0;
				s1_point-=(interval/2);
				break;
			case 4:
				healpix_point+=2;
				s1_point-=(interval/2);
				break;
			case 5:
				healpix_point+=1;
				s1_point+=(interval/2);
				break;
			case 6:
				healpix_point+=2;
				s1_point+=(interval/2);
				break;
			case 7:
				healpix_point+=1;
				s1_point-=(interval/2);
				break;
				
		}
	}
	else if(base_grid == 3 or base_grid == 1 or base_grid == 9 or base_grid == 11)
	{
		switch(position) 
		{
			case 0:
				healpix_point+=3;
				s1_point-=(interval/2);
				break;
			case 1:
				healpix_point+=0;
				s1_point+=(interval/2);
				break;
			case 2: 
				healpix_point+=3;
				s1_point+=(interval/2);
				break;
			case 3:
				healpix_point+=0;
				s1_point-=(interval/2);
				break;
			case 4:
				healpix_point+=1;
				s1_point-=(interval/2);
				break;
			case 5:
				healpix_point+=2;
				s1_point+=(interval/2);
				break;
			case 6:
				healpix_point+=1;
				s1_point+=(interval/2);
				break;
			case 7:
				healpix_point+=2;
				s1_point-=(interval/2);
				break;
				
		}
	}
	else if(base_grid == 2 or base_grid == 0 or base_grid == 10 or base_grid == 8)
	{
		switch(position) 
		{ 
			case 0:
				healpix_point+=0;
				s1_point-=(interval/2);
				break;
			case 1:
				healpix_point+=3;
				s1_point+=(interval/2);
				break;
			case 2: 
				healpix_point+=0;
				s1_point+=(interval/2);
				break;
			case 3:
				healpix_point+=3;
				s1_point-=(interval/2);
				break;
			case 4:
				healpix_point+=1;
				s1_point-=(interval/2);
				break;
			case 5:
				healpix_point+=2;
				s1_point+=(interval/2);
				break;
			case 6:
				healpix_point+=1;
				s1_point+=(interval/2);
				break;
			case 7:
				healpix_point+=2;
				s1_point-=(interval/2);
				break;
				
		}
	}
	else if(base_grid == 4 or base_grid == 5)
	{
		switch(position) 
		{ 
			case 0:
				healpix_point+=0;
				s1_point-=(interval/2);
				break;
			case 1:
				healpix_point+=3;
				s1_point+=(interval/2);
				break;
			case 2: 
				healpix_point+=0;
				s1_point+=(interval/2);
				break;
			case 3:
				healpix_point+=3;
				s1_point-=(interval/2);
				break;
			case 4:
				healpix_point+=2;
				s1_point-=(interval/2);
				break;
			case 5:
				healpix_point+=1;
				s1_point+=(interval/2);
				break;
			case 6:
				healpix_point+=2;
				s1_point+=(interval/2);
				break;
			case 7:
				healpix_point+=1;
				s1_point-=(interval/2);
				break;
				
		}
	}
	
	quo=point/8;
	if(quo==0)
	{
		long int nside=pow(2,level);
		double theta=0,phi=0,psi=0;
		pix2ang_nest(nside,healpix_point,&theta,&phi);
		psi=s1_point*M_PI/180;
		Point.resize(0);
		Point.push_back(theta);	
		Point.push_back(phi);	
		Point.push_back(psi);
		return Point;
	}
	else
	{
		return find_point(base_grid,quo-1,level+1,4*healpix_point,s1_point); 
	}
}

bool CXYSO3Sequence::hopf2quat(vector < vector <double> > Points)
{
	double x1=0,x2=0,x3=0,x4=0;
	ofstream output;
	output.open("data.qua");
	
	//		its representation is different from the website, but it is fine, only different 180 in one angle
	//		because it will enumrate all space, so there is no different.
	//		http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm
	m_vQuat.resize(0);
//	double oldpoint_xyz[3] = {1/sqrt(3), 1/sqrt(3), 1/sqrt(3)};
	double oldpoint_xyz[3] = {1, 0, 0};	
//	double oldpoint_xyz[3] = { 0, 0, 1};		
	double newpoint_xyz[3] = {0, 0, 0};

	
	for(unsigned int i=0;i<Points.size();i++)
	{
		x4=sin(Points[i][0]/2)*sin(Points[i][1]+Points[i][2]/2);
		x1=cos(Points[i][0]/2)*cos(Points[i][2]/2);
		x2=cos(Points[i][0]/2)*sin(Points[i][2]/2);
		x3=sin(Points[i][0]/2)*cos(Points[i][1]+Points[i][2]/2);

		
//		x2=sin(Points[i][0]/2)*sin(Points[i][1]-Points[i][2]/2);
//		x1=cos(Points[i][0]/2)*cos(Points[i][2]/2);
//		x4=cos(Points[i][0]/2)*sin(Points[i][2]/2);
//		x3=sin(Points[i][0]/2)*cos(Points[i][1]-Points[i][2]/2);
		
//		output << Points[i][0]*180/3.1415 << "\t" << Points[i][1]*180/3.1415 << "\t" << Points[i][2]*180/3.1415 << endl;

//				output << x1 << "\t" << x2 << "\t" << x3 << "\t" << x4 << endl;
//		output << endl;

		Quaternion quat;
		quat.w = x1; quat.x = x2; quat.y = x3; quat.z = x4;
//		quat.w = x4; quat.x = x1; quat.y = x2; quat.z = x3;
		m_vQuat.push_back(quat);

//		double oldpoint_xyz[3] = {0,1,1};	
//		quat.w = sqrt(2)/2; quat.x = 0; quat.y = sqrt(2)/2; quat.z = 0;
		
		quat2vector(quat, oldpoint_xyz, newpoint_xyz);
				
//		EulerAngle ea;
//		ea.theta = Points[i][0]*2;
//		ea.phi	 = Points[i][1];
//		ea.psi   = Points[i][2];
//		eulerangle2vector(ea, oldpoint_xyz,newpoint_xyz);		
		
		double theta=0, phi=0;
		theta = Points[i][0];
		phi = Points[i][1];
		ang2vec(theta, phi, newpoint_xyz);
		output << newpoint_xyz[0] <<"\t"<<newpoint_xyz[1] <<"\t"<<newpoint_xyz[2] << endl;

	}
	output.close();
	return true;
}


//----------------------------------------------------------------------------
int CXYSO3Sequence::SetSO3Sequence(){
	long int num_points=0;
	vector < double > Point;
//	vector < vector<double> > Points;
	vector < vector<int> > Sequence_base;
	long int base_grid=0,cur_point=0;
	long int point_healpix=0;
	double point_S1=0;
	double theta=0,phi=0,psi=0;
	int limit=0;
	
	num_points = m_iNumPoints;
	Sequence_base = GetSequenceBase();
	
	//first seventy two points are the base grid points;
	m_vPoints.resize(0);
	if(num_points<72)
		limit=num_points;
	else
		limit=72;
	
	for(int i=0;i<limit;i++)
	{
		Point.resize(0);
		pix2ang_nest(1,Sequence_base[i][0],&theta,&phi);
		switch(Sequence_base[i][1]) //mapping index on S1 to its angle value
		{
			case 0:
				point_S1=30;
				break;
			case 1:
				point_S1=90;
				break;
			case 2: 
				point_S1=150;
				break;
			case 3:
				point_S1=210;
				break;
			case 4: 
				point_S1=270;
				break;
			case 5: 
				point_S1=330;
				break;
		}
		psi=point_S1*M_PI/180;
		Point.push_back(theta);
		Point.push_back(phi);
		Point.push_back(psi);
		m_vPoints.push_back(Point);
	}
	
	
	for(int i=0;i<num_points-72;i++) //this will only be called if points are more than 72.
	{
		Point.resize(0);
		base_grid=i%72;
		cur_point=i/72;
		point_healpix=4*Sequence_base[base_grid][0];
		switch(Sequence_base[base_grid][1]) //mapping index on S1 to its angle value
		{
			case 0:
				point_S1=30;
				break;
			case 1:
				point_S1=90;
				break;
			case 2: 
				point_S1=150;
				break;
			case 3:
				point_S1=210;
				break;
			case 4: 
				point_S1=270;
				break;
			case 5: 
				point_S1=330;
				break;
		}
		Point=find_point(Sequence_base[base_grid][0],cur_point,1,point_healpix,point_S1); //current point value,level,current point in healpix, current point for S1
		m_vPoints.push_back(Point);
	}
	
	if(hopf2quat(m_vPoints))
		return 0;
	else
	{
		cout << "Problem in converting to quaternions" << endl;
		return 0;
	}
	
}
//----------------------------------------------------------------------------
void	CXYSO3Sequence:: SetSequenceBase(){
	// NUM_BASE = 72
	int num_basepaire = 72;
	static const int arr[144] = {
		6,0,
		6,3,
		6,1,
		6,4,
		6,2,
		6,5,
		4,0,
		4,3,
		4,1,
		4,4,
		4,2,
		4,5,
		1,0,
		1,3,
		1,1,
		1,4,
		1,2,
		1,5,
		11,0,
		11,3,
		11,1,
		11,4,
		11,2,
		11,5,
		9,0,
		9,3,
		9,1,
		9,4,
		9,2,
		9,5,
		3,0,
		3,3,
		3,1,
		3,4,
		3,2,
		3,5,
		5,0,
		5,3,
		5,1,
		5,4,
		5,2,
		5,5,
		7,0,
		7,3,
		7,1,
		7,4,
		7,2,
		7,5,
		10,0,
		10,3,
		10,1,
		10,4,
		10,2,
		10,5,
		0,0,
		0,3,
		0,1,
		0,4,
		0,2,
		0,5,
		2,0,
		2,3,
		2,1,
		2,4,
		2,2,
		2,5,
		8,0,
		8,3,
		8,1,
		8,4,
		8,2,
		8,5
	};
	
	m_vSequence_base.resize(0);
	for (int i=0; i<num_basepaire; i++) {
		vector<int> iVecTmp(arr+i*2, arr + (i*2+2) );
//		cout << iVecTmp[0] << "\t" << iVecTmp[1] << endl;
		m_vSequence_base.push_back(iVecTmp);
	}
}
//----------------------------------------------------------------------------
vector< vector< int > >& CXYSO3Sequence::GetSequenceBase(){
	return m_vSequence_base;
}

//----------------------------------------------------------------------------
int CXYSO3Sequence::GetNumPoints(){
	return m_iNumPoints;
}
//----------------------------------------------------------------------------

/*!
 *	\fn			void CXYSO3Sequence::quat2vector(Quaternion quat, double& oldpoint_xyz, double& newpoint_xyz)
 *	\brief  apply quaternion to vector to get new vector
 *	\note		Vince, J. (2011). Quaternions for Computer Graphics (1st ed. p. 154). Springer. page 118
 *	\param quat a Quaternion
 *	\param oldpoint_xyz double*
 *	\return newpoint_xyz
*/

void CXYSO3Sequence::quat2vector(Quaternion quat, double oldpoint_xyz[], double newpoint_xyz[]){
	double qw, qx, qy, qz;
	qw = quat.w;
	qx = quat.x;
	qy = quat.y;
	qz = quat.z;

	double ox, oy, oz;
	ox = oldpoint_xyz[0];
	oy = oldpoint_xyz[1];
	oz = oldpoint_xyz[2];
	
	double a11, a12, a13, a21, a22, a23, a31, a32, a33;
	a11 = 2*(qw*qw + qx*qx) - 1;
	a12 = 2*(qx*qy - qw*qz);
	a13 = 2*(qx*qz + qw*qy);
	a21 = 2*(qx*qy + qw*qz);
	a22 = 2*(qw*qw + qy*qy) - 1;
	a23 = 2*(qy*qz - qw*qx);
	a31 = 2*(qx*qz - qw*qy);
	a32 = 2*(qy*qz + qw*qx);
	a33 = 2*(qw*qw + qz*qz) - 1;
	
	newpoint_xyz[0] = a11*ox + a12*oy + a13*oz;
	newpoint_xyz[1] = a21*ox + a22*oy + a23*oz;
	newpoint_xyz[2] = a31*ox + a32*oy + a33*oz;
	
}


void CXYSO3Sequence::eulerangle2vector(EulerAngle ea, double oldpoint_xyz[], double newpoint_xyz[]){
	double theta, phi, psi;
	theta = ea.theta;
	phi   = ea.phi;
	psi   = ea.psi;
	
	double ox, oy, oz;
	ox = oldpoint_xyz[0];
	oy = oldpoint_xyz[1];
	oz = oldpoint_xyz[2];

	double a11, a12, a13, a21, a22, a23, a31, a32, a33;
	a11 = cos(theta)*cos(phi);
	a12 = cos(theta)*sin(phi);
	a13 = -sin(theta);
	a21 = sin(psi)*sin(theta)*cos(phi) - cos(psi)*sin(phi);
	a22 = sin(psi)*sin(theta)*sin(phi) + cos(psi)*cos(phi);
	a23 = cos(theta)*sin(psi);
	a31 = cos(psi)*sin(theta)*cos(phi) + sin(psi)*sin(phi);
	a32 = cos(psi)*sin(theta)*sin(phi) - sin(psi)*cos(phi);
	a33 = cos(theta)*cos(psi);

	newpoint_xyz[0] = a11*ox + a12*oy + a13*oz;
	newpoint_xyz[1] = a21*ox + a22*oy + a23*oz;
	newpoint_xyz[2] = a31*ox + a32*oy + a33*oz;
	
}

void CXYSO3Sequence::ang2vec(double theta, double phi, double *vec) {
	
  double sz;
  double PI=M_PI;
	
  if( theta<0. || theta>PI) {
    fprintf(stderr, "%s (%d): theta out of range: %f\n", __FILE__, __LINE__, theta);
    exit(0);
  }
	
  sz = sin(theta);
	
  vec[0] = sz * cos(phi) ;
  vec[1] = sz * sin(phi) ;
  vec[2] = cos(theta)    ;
	
}
